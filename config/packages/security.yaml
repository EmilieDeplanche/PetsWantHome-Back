security:
  encoders:
    # plaintext = en clair / auto = prend le meilleur disponible sur le système
    # en 2021 soit bcrypt soit argon2
    App\Entity\User:
      algorithm: auto

  # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
  providers:
    # users_in_memory: { memory: null }
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email
    # used to reload user from session & other features (e.g. switch_user)
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    login:
      pattern: ^/api/login
      stateless: true
      anonymous: true
      json_login:
        check_path: /api/login
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure
    # Authentification JWT pour les routes de l'API
    api_anonymous:
      pattern: ^/api/users
      anonymous: true
    api:
      pattern: ^/api
      stateless: true
      guard:
        authenticators:
          - lexik_jwt_authentication.jwt_token_authenticator
    main:
      anonymous: true
      lazy: true
      provider: app_user_provider

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#firewalls-authentication

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true
      # Déconnexion
      logout:
        # Soit un chemin (endpoint, /logout), soit un nom de route
        path: api_logout

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/api/logout, roles: ROLE_MANAGER }
    - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

  role_hierarchy:
    ROLE_MANAGER: ROLE_USER
